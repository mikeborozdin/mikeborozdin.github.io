<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Borozdin&#39;s Blog</title>
    <description>software engineering, product management &amp; agile
</description>
    <link>https://mikeborozdin.com/</link>
    <atom:link href="https://mikeborozdin.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 14 Oct 2018 15:38:57 +0000</pubDate>
    <lastBuildDate>Sun, 14 Oct 2018 15:38:57 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Split User Stories Ruthlessly - And Get Value Earlier</title>
        <description>&lt;p&gt;Why do you need to split user stories?&lt;/p&gt;

&lt;p&gt;Often, you hear that it is important to split user stories. You read articles that say it should be possible to complete a user story within a single sprint, ideally within a few days. That’s entirely accurate. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But the main benefit of splitting user stories is that you will deliver value faster!&lt;!-- more --&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s take a look at an example. Say, we are developing a time tracking tool. Its main purpose is to analyse time spent on different projects. &lt;/p&gt;

&lt;p&gt;Let’s also assume that we already have a prioritised backlog that looks like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter timesheets&lt;/li&gt;
  &lt;li&gt;Approve timesheets&lt;/li&gt;
  &lt;li&gt;View time spent by project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the first glance, the backlog looks reasonable. It appears to be prioritised and the user stories look small enough. But the devil is in the details. When you look at the the first story - &lt;code&gt;‘Enter timesheets’&lt;/code&gt;, you’ll see the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;As a developer
I want to be able to log time spent on projects
So that the company could analyse time spent on different projects

**Acceptance criteria**

* Users select a project and enter hours spent for each day
* Users can add more lines for other projects
	* Users can delete lines for projects
	* If a user presses [delete] on an item with hours, 
		there has to be a confirmation pop-up
* There should be an area where a user can see total time spent per day
	* We want a user to avoid making mistakes. If time soent is less or more than 
	8 hours per day it has to be coloured in red. 
	If it’s 8 hours plus/minus one hour, it should be coloured in green.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s also a mockup attached.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-08-13-split-user-stories/mockup.png&quot; alt=&quot;Mockup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, that’s escalated quickly! A simple story has turned out into a collection of business rules!&lt;/p&gt;

&lt;p&gt;It may seem that each rule is small enough and can be easily implemented. But don’t give in to that temptation!&lt;/p&gt;

&lt;p&gt;Each rule is small enough, but in total they all will make up to a substantial amount of time to develop. That will, in turn, require a good amount of testing, as well.&lt;/p&gt;

&lt;h1 id=&quot;think-of-product-goal&quot;&gt;Think of Product Goal&lt;/h1&gt;

&lt;p&gt;So, let’s stop and think. What’s the proposition behind your product? It is analysis of time spent on different projects. There is even a user story for that. So, why don’t we go to that user story as fast as possible?!&lt;/p&gt;

&lt;h1 id=&quot;consider-main-goal-of-user-story-split-story-to-achive-that-goal-faster&quot;&gt;Consider Main Goal of User Story. Split Story to Achive That Goal Faster&lt;/h1&gt;

&lt;p&gt;And what is the main premise of the ‘Enter timesheets’ story? Well, that’s an ability to enter timesheets! So, let’s focus on that activity and try to move other bits into separate user stories. &lt;/p&gt;

&lt;p&gt;If we look at the acceptance criteria, we’ll see that most of it is not about entering timesheets, but related functionality. For example, we want to have a variable number of activities (lines) per week. Then, we would like to see nice visual cues, if hours entered look wrong.&lt;/p&gt;

&lt;p&gt;Those are great ideas, but do they help us to achive the overacrching product goal? No. So, let’s focus on what is really important. And split the user story into:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter timesheets (3 activities per week)&lt;/li&gt;
  &lt;li&gt;Visual cues when the hours entered doesn’t look right&lt;/li&gt;
  &lt;li&gt;Have more than 3 activities per week&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;re-prioritise-backlog&quot;&gt;Re-prioritise Backlog&lt;/h1&gt;

&lt;p&gt;Now, we should go back to our backlog and re-prioritise it. We want to put the last two stories to the bottom of the backlog. At the end your backlog should look like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enter timesheets (3 activities per week)&lt;/li&gt;
  &lt;li&gt;Approve timesheets&lt;/li&gt;
  &lt;li&gt;View time spent by project&lt;/li&gt;
  &lt;li&gt;Visual cues when the hours entered doesn’t look right&lt;/li&gt;
  &lt;li&gt;Have more than 3 activities per week&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Always re-prioritise the backlog after splitting user stories. Otherwise, you would do the same things in the initial order and wouldn’t move towards your product goals fast enough.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Splitting user stories allows you to prioritise what is really important. And achieve the product goals faster. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ll probably have to repeat this exercise for ‘Approve Timesheets’ and ‘View time spent by project’. But I guess you’ve got the idea. You’ll end up with the &lt;strong&gt;Prioritise - Split - Prioritise cycle&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-08-13-split-user-stories/prioritise-split-cycle.png&quot; alt=&quot;Prioritise-Split Cycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another good way to look at is to revisit the famous picture of the iterative Mona Lisa (pictures below are credit of Jeff Patton - the inventor of User Story Maps) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Incremental Mona Lisa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-08-13-split-user-stories/incremental-mona-lisa.jpg&quot; alt=&quot;Incremental Mona Lisa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iterative Mona Lisa&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-08-13-split-user-stories/iterative-mona-lisa.jpg&quot; alt=&quot;Iterative Mona Lisa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Indeed, you don’t want to spend time painting the perfect top-left corner of the picture (the original ‘Enter Timesheets’ story). Instead, you want to sketch out the whole piece. That will already give users and stakeholders something to play with. Such early deliver will allow you to get feedback from users and learn from that.&lt;/p&gt;

&lt;h1 id=&quot;additional-reading&quot;&gt;Additional Reading&lt;/h1&gt;
&lt;p&gt;I’ve focused on the benefits of splitting user stories here. But if you want to know more about techniques for splitting user stories and prioritising backlogs, then I would suggest the following reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://agileforall.com/patterns-for-splitting-user-stories/&quot;&gt;Patterns for Splitting User Stories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://jpattonassociates.com/the-new-backlog/&quot;&gt;The New User Story Backlog is a Map&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;User Story Mapping is a fantastic technique for understand how to achieve a user’s goals fast&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.impactmapping.org/delivering.html&quot;&gt;Impact Mapping&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Impact Mapping is especially good at understand what you &lt;strong&gt;don’t need&lt;/strong&gt; to do in order to achieve your goals&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/split-user-stories-get-value-early</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/split-user-stories-get-value-early</guid>
        
        
      </item>
    
      <item>
        <title>Writing a JavaScript Public Library? Validate Your Arguments</title>
        <description>&lt;p&gt;How many times have seen an obscure JavaScript error when using one 3rd party library or another? More likely than not, you’ve come across a message like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TypeError: Cannot call method &#39;someMethod&#39; of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your browser or the Node.js interpreter will tell you in which file and on which line that error has occurred. Then, you’ll start a very mundane task of examining the code of a 3rd party library, if it’s has not been minimised, of course. Eventually, you will find out that you have forgotten to provide one of the arguments required by a function.
You may even see a more obscure error. &lt;!-- more --&gt; Let’s take the standard Node.js library for an example, more specifically, its &lt;code&gt;http&lt;/code&gt; module. It has the &lt;code&gt;request()&lt;/code&gt; function that sends an HTTP request that can be meticulously configured with an object you pass into. What if you accidentally confuse one of the object’s attributes, for example, instead of typing &lt;code&gt;hostname&lt;/code&gt; you write &lt;code&gt;url&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;www.google.com&amp;#39;&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, you will see an error saying exactly the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw er; // Unhandled &#39;error&#39; event
Error: connect ECONNREFUSED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Urgh, what could it mean? Has Google suddenly gone down? No, you should have read the documentation more carefully and remember that the attribute is called &lt;code&gt;hostname&lt;/code&gt;, not &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, so, where does the problem lie? Is it a developer’s problem that they have accidentally made mistake and spent hours debugging? Let’s face, we all make mistakes. Some tools though provide better feedback than the other ones.&lt;/p&gt;

&lt;h2 id=&quot;can-static-typing-really-help&quot;&gt;Can Static Typing Really Help?&lt;/h2&gt;

&lt;p&gt;It might sound that I’m arriving on the idea of introducing static typing in JavaScript - this is not true. However, I believe that when we’re writing code in JavaScript we still assume certain types. In other words, if we create a multiplying function, like the one below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We presume that &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are numbers, not strings or objects. This idea is beautifully put by Facebook &lt;a href=&quot;https://code.facebook.com/posts/1505962329687926/flow-a-new-static-type-checker-for-javascript/&quot;&gt;in their introduction to Flow&lt;/a&gt;, a static type checking for JavaScript - &lt;em&gt;‘the design of Flow is the assumption that most JavaScript code is implicitly statically typed; even though types may not appear anywhere in the code, they are in the developer’s mind as a way to reason about the correctness of the code’&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Would even having static typing in JavaScript help? After all, you can already use TypeScript…&lt;/p&gt;

&lt;p&gt;Well, partially… Statically typed languages are still prone to similar issues. Let’s take Java as an example. It can provide great feedback to a developer during a compilation. What about the run time though? How many time have you seen a &lt;code&gt;NullPointerException&lt;/code&gt; creeping out of nowhere?&lt;/p&gt;

&lt;p&gt;Is Java’s &lt;code&gt;NullPointerException&lt;/code&gt; anyhow different from the problem with &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; in JavaScript? Not really. Either way, you’ll have to analyse a call stack.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerPrinter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printCustomerInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The code is written in a statically type language, so you cannot pass an &lt;code&gt;int&lt;/code&gt; or a &lt;code&gt;String&lt;/code&gt;. What about passing a &lt;code&gt;null&lt;/code&gt; though?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomerPrinter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printCustomerInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That problem will not be caught when compiling the code, instead there will be a runtime exception. The code snippet above is fairly simple. Imagine calling &lt;code&gt;customer.getName()&lt;/code&gt; somewhere deep inside the method? That would be ‘fun’ to debug…&lt;/p&gt;

&lt;p&gt;It’s hardly a surprise that even Java, a statically typed language, has libraries, such as Guava, one of which goals is to solve the problem by &lt;a href=&quot;http://stackoverflow.com/questions/26184322/whats-the-point-of-guava-checknotnull&quot;&gt;failing fast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Developers, using Guava, would strive to use &lt;code&gt;Preconditions&lt;/code&gt; to fail as early as possibly and provide meaningful information if something goes wrong, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerPrinter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printCustomerInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;n&quot;&gt;Preconditions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkNotNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;   &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;fail-fast&quot;&gt;Fail Fast&lt;/h2&gt;

&lt;p&gt;Here, we arrive on a very important point when it comes to the API design. Do fail fast. Please, do. I also beg you to provide an informative message to a user. We all use 3rd party libraries because they solve problems we don’t want to specialise in. And we don’t want to dive into the code of those libraries to find out why we see that message about some undefined value or something even more esoteric.&lt;/p&gt;

&lt;p&gt;All we want to see is a nice message saying that a certain argument is not what a function expects. That can be implemented with a fairly simple piece of code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sendHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;object&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hostname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Param must be an object that has the `hostname` attribute&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;c1&quot;&gt;//do something useful&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/writing-a-public-js-library-validate-your-arguments</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/writing-a-public-js-library-validate-your-arguments</guid>
        
        
      </item>
    
      <item>
        <title>Practical Functional Programming in JavaScript</title>
        <description>&lt;p&gt;JavaScript is a multi-paradigm language with rich functional programming capabilities. Functional programming does not have to be difficult or hugely theoretical. Quite the opposite &amp;ndash; it can help you to solve the most common programming challenges in a more concise and elegant fashion.&lt;/p&gt;  

&lt;p&gt;In this video I focus on working with arrays in JavaScript. Normally, when dealing with arrays a developer would write a for loop and mutate a variable or two. However, JavaScript already comes with functions, such as, &lt;code&gt;every()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, &lt;code&gt;reduce()&lt;/code&gt;, etc. that help you to write better code for array operations. &lt;!-- more --&gt;.

&lt;p&gt;I also demonstrate how you can combine those functions together in order to encapsulate complex data operations . We analyse performance of some operations and show how certain issues can be solved by using 3rd party libraries, such as &lt;a href=&quot;http://danieltao.com/lazy.js/&quot;&gt;lazy.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/facebook/immutable-js&quot;&gt;Immutable.js&lt;/a&gt; Finally, I illustrate how functional programming can become only better in EcmaScript 6.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/hWWr2fex2Tc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/practical-functional-programming-in-javascript</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/practical-functional-programming-in-javascript</guid>
        
        
      </item>
    
      <item>
        <title>Joy and Benefits of Codefest</title>
        <description>&lt;p&gt;I have already &lt;a href=&quot;http://ncredinburgh.com/blog/posts/information-sharing-in-software-development&quot;&gt;blogged&lt;/a&gt; about the ways to share expertise and knowledge inside your organisation However, there is one more way. That’s something we call a codefest or hackathon. Codefest is an opportunity to work for two days on any project you like using any technology of your choice. Also, it’s a chance to work with people you don’t have on your project. This blog post is available &lt;a href=&quot;http://ncredinburgh.com/blog/posts/joy-and-benefits-of-codefest&quot; target=&quot;_blank&quot;&gt;on my company’s blog&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/joy-and-benefits-of-codefest</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/joy-and-benefits-of-codefest</guid>
        
        
      </item>
    
      <item>
        <title>Information Sharing in Software Development</title>
        <description>&lt;p&gt;Where IT organisations have heterogeneous technical environments it is not always possible to know what your colleagues are working on and which challenges they are facing. This blog post will discuss various ways to share information in an IT organisation. The article was written for company’s blog &lt;a href=&quot;http://ncredinburgh.com/blog/posts/information-sharing-in-software-development&quot; target=&quot;_blank&quot;&gt;where you can read it now&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/information-sharing-in-software-development</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/information-sharing-in-software-development</guid>
        
        
      </item>
    
      <item>
        <title>A Code Review Is More Useful Than You Think</title>
        <description>&lt;p&gt;Recently, I came across a situation which once again proved the immense value in having code reviews. I was working on a tricky part of an application that involved substantial design work. As part of our &#39;Definition of Done&#39;, I had to submit my code for a peer review. The review turned out to be invaluable - after all, it&#39;s always useful to get the second pair of eyes to look at your work.&lt;/p&gt;  &lt;p&gt;I wrote this article for my &lt;a class=&quot;more&quot; href=&quot;http://ncredinburgh.com/blog/posts/a-code-review-is-more-useful-than-you-think&quot;&gt;company’s blog where&lt;/a&gt; you can read it now.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/a-code-review-is-more-useful-than-you-think</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/a-code-review-is-more-useful-than-you-think</guid>
        
        
      </item>
    
      <item>
        <title>My Agile Journey</title>
        <description>&lt;p&gt;There can be debates whether the Agile Software Development processes have become mainstream or not, but most of the software development houses are trying to adopt the Agile practices. Yet, coming from academia or, say, a less agile environment, such practices can be misunderstood.&lt;/p&gt;  &lt;p&gt;In this post, I am going to tell how I have become an avid agile practitioner and what has helped in that glorious journey. &lt;!-- more --&gt; My journey started in December 2011 when I finished my Master’s got my first full time job as a Software Developer at &lt;a href=&quot;http://www.cloudreach.com/&quot; target=&quot;_blank&quot;&gt;Cloudreach Limited&lt;/a&gt;. Of course, I had a couple of internships under my belt, and was running this blog, but I clearly didn’t have any experience of working in a team on commercial software. I must admit though I was still interested not only programming languages and technologies, but also in processes. Yet, I only had, say, some textbook knowledge, and was slightly scared to write tests before code. I remember though that while working on some university project I was saying to myself that I must write some unit tests, or otherwise, my code would become a buggy mess.&lt;/p&gt;  &lt;p&gt;The times they are a changing. Now, I can’t allow myself to write a piece of code without writing a test first. So, I’ll try to list the thing which have helped to become comfortable to Agile, and which I have noticed on my journey.&lt;/p&gt;  &lt;h2&gt;Proper Mentorship Helps. Yet, You Must Be Open For New Things.&lt;/h2&gt;  &lt;p&gt;First of all, I would hardly be able to embrace Agile without the help of my more experienced colleagues. Thank you guys! Of course, one can read books, and various online resources, but it’s crucial to be able to ask someone a question, and check whether you are on a right track or not. In total, I was assisted in the following ways:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;A training project that can give a developer a kick start with the Agile, as well as with some new technology. Since, it’s just a training project it eliminates all possible stress and allows focusing on learning new things &lt;/li&gt;    &lt;li&gt;Code reviews are an efficient way of learning from your peers, and also getting to know other parts of the application. So, try to get your code reviewed, and use a chance to review someone else’s code. I wrote a bit on the benefits of code reviews and the ways of conducting them in &lt;a href=&quot;http://devblog.cloudreach.co.uk/2012/08/asynchronous-code-reviews-as-efficient.html&quot; target=&quot;_blank&quot;&gt;this article&lt;/a&gt;. &lt;/li&gt;    &lt;li&gt;Regular catch-ups with a more experienced colleague. In other words, try to get a mentor who works with you and observes your progress. Also, don’t view mentorship as a one-way process. A good mentor will be keen to get your feedback and react accordingly. &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;The last, but not the least, be open to new things. People can be naturally resistant to changes, and it’s essential to keep that in mind when thinking about the customer, yet, yourself should not be discouraged from doing something in a new way.&lt;/p&gt;  &lt;h2&gt;Scrum Is Easy To Understand&lt;/h2&gt;  &lt;p&gt;Just recently I came across an &lt;a href=&quot;http://java.dzone.com/articles/why-scrum-won&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt; which said that Scrum had achieved its solid position today mainly due to its simplicity. Thinking retrospectively, I would say that this is indeed true. Moreover, this is one of the factors that has helped to adopt the agile quite easily.&lt;/p&gt;  &lt;p&gt;Moreover, things like daily stand-ups and sprint retrospectives allow you to know what everyone is doing, and have your say if something does not go very well.&lt;/p&gt;  &lt;h2&gt;Don’t Be Scared of Test-Driven Development&lt;/h2&gt;  &lt;p&gt;Writing tests before code might sound strange at first, but it’s indeed worth doing that. It not only makes your code more reliable, but also dramatically improves its maintainability. Indeed, the book that assisted me in embracing TDD was called ‘&lt;a href=&quot;http://www.growing-object-oriented-software.com/&quot; target=&quot;_blank&quot;&gt;Growing Object-Oriented Software Guided By Tests’&lt;/a&gt;. There is a popular argument against TDD which says that it slows down development. In fact, it speeds it up. Try writing a complex application that interacts with a few external system with no tests – it will fail to work at first, and you will struggle to debug it.&lt;/p&gt;  &lt;p&gt;Finally, don’t focus on testing method per se, put emphasis on testing behaviour of your application and its parts. Adopt &lt;a href=&quot;http://dannorth.net/introducing-bdd/&quot; target=&quot;_blank&quot;&gt;Behaviour-Driven Development&lt;/a&gt;, and pair it with &lt;a href=&quot;http://rubylearning.com/blog/2010/10/05/outside-in-development/&quot; target=&quot;_blank&quot;&gt;Outside-in Development.&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I also gave a &lt;a href=&quot;http://vimeo.com/46619279&quot; target=&quot;_blank&quot;&gt;talk&lt;/a&gt; in Glasgow, UK, and wrote a &lt;a href=&quot;http://devblog.cloudreach.co.uk/2012/05/behaviour-driven-development-in-net.html&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt; about Outside-In Behaviour Driven Development.&lt;/p&gt;  &lt;h2&gt;It’s More About Techniques Rather Than Underlying Tools&lt;/h2&gt;  &lt;p&gt;Indeed, you can work with a programming language whose limitation doesn’t allow for having a generic mocking framework. Is it a reason not to use mock objects in your tests? Not all! After all, it doesn’t take a lot of time to write mock objects by hand. Once again, the benefits of doing that will hugely outweigh that little time you spend on it.&lt;/p&gt;  &lt;h2&gt;Transfer Your Knowledge As You Go&lt;/h2&gt;  &lt;p&gt;There is no better way to ensure that you understand a concept than explaining it to someone else. Feel free to tell about your Agile successes to fellow developers. Don’t be afraid to blog, and speak at public events. You will not only improve your understanding of the Agile methodology, but spread the word about it. Needless to say, it will also help you to build up your professional reputation.&lt;/p&gt;  &lt;h2&gt;It’s A Never Ending Journey&lt;/h2&gt;  &lt;p&gt;Having called myself ‘an avid Agile practitioner’ in the beginning of the article, I believe there are still tons to be learnt. After all, we should try to learn something every day.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Jan 2013 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/my-agile-journey</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/my-agile-journey</guid>
        
        
      </item>
    
      <item>
        <title>Handling the Double-Click Event with the Visio API</title>
        <description>&lt;p&gt;I have already covered the Visio event model in &lt;a href=&quot;http://www.mikeborozdin.com/post/Understanding-Visio-Event-Model.aspx&quot; target=&quot;_blank&quot;&gt;one of the previous posts&lt;/a&gt;. Unfortunately, not every event can be handled in that easy way. For instance, the double-click event requires a totally different approach.&lt;/p&gt;
&lt;p&gt;In order to handle the &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;double-click&lt;/span&gt; on a shape you have to use &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;ShapeSheet &lt;/span&gt;&lt;!-- more --&gt;&lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt; &lt;/span&gt;that was briefly mentioned &lt;a href=&quot;http://www.mikeborozdin.com/post/Reading-and-Writing-Visio-Shape-Information-with-C.aspx&quot; target=&quot;_blank&quot;&gt;before&lt;/a&gt;. The &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;ShapeSheet&lt;/span&gt; contains the &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;EventDblClick&lt;/span&gt; property. We can handle it if we assign the VBA code that executes &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;QUEUEMARKEREVENT&lt;/span&gt; function that can pass the control back to C#. Then, we just handle the &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;MarkerEvent&lt;/span&gt; in Visio.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; Form1 : Form&lt;/pre&gt;
&lt;pre&gt;{&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; Form1()&lt;/pre&gt;
&lt;pre&gt;    {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        InitializeComponent();&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;rem&quot;&gt;//don&#39;t forget to add this line in order to be able to hande the double-click event&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.Window.Application.MarkerEvent +=&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Visio.EApplication_MarkerEventEventHandler(Application_MarkerEvent);&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.DocumentOpened +=&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; AxMicrosoft.Office.Interop.VisOcx.EVisOcx_DocumentOpenedEventHandler(visioControl_DocumentOpened);&lt;/pre&gt;
&lt;pre&gt;    }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Application_MarkerEvent(Visio.Application app, &lt;span class=&quot;kwrd&quot;&gt;int&lt;/span&gt; SequenceNum, &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; ContextString)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;rem&quot;&gt;//make sure that it is a double-click&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (ContextString != &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; ContextString.Contains(&lt;span class=&quot;str&quot;&gt;&quot;/cmd=DoubleClick&quot;&lt;/span&gt;))&lt;/pre&gt;
&lt;pre&gt;        {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;            &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; sourceTag = &lt;span class=&quot;str&quot;&gt;&quot;/source=&quot;&lt;/span&gt;;&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;            MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&quot;DoubleClick at ShapeID: &quot;&lt;/span&gt; + ContextString.Substring(ContextString.IndexOf(sourceTag) +&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;sourceTag.Length));&lt;/pre&gt;
&lt;pre&gt;        }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; visioControl_DocumentOpened(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, AxMicrosoft.Office.Interop.VisOcx.EVisOcx_DocumentOpenedEvent e)&lt;/pre&gt;
&lt;pre&gt;    {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;rem&quot;&gt;//iterate through all the shapes and assign a handler for the DoubleClick event&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;foreach&lt;/span&gt; (Visio.Shape shape &lt;span class=&quot;kwrd&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.Window.Application.ActivePage.Shapes)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        {&lt;/pre&gt;
&lt;pre&gt;            shape.Cells[&lt;span class=&quot;str&quot;&gt;&quot;EventDblClick&quot;&lt;/span&gt;].Formula = &lt;span class=&quot;str&quot;&gt;&quot;=QUEUEMARKEREVENT(\&quot;/cmd=DoubleClick /source=&quot;&lt;/span&gt; + shape.ID + &lt;span class=&quot;str&quot;&gt;&quot;\&quot;)&quot;&lt;/span&gt;;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        }&lt;/pre&gt;
&lt;pre&gt;    }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; openToolStripMenuItem_Click(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EventArgs e)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (openDiagramDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        {&lt;/pre&gt;
&lt;pre&gt;            &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.Src = openDiagramDialog.FileName;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        }&lt;/pre&gt;
&lt;pre&gt;    }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;As you can see when executing VBA&amp;rsquo;s &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;QUEUEMARKEREVENT()&lt;/span&gt; we can use an arbitrary string as its argument where we can pass any value. In the example above, we pass &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;&amp;lsquo;cmd=DoubleClick&amp;rsquo;&lt;/span&gt; as a code for the event and &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;&amp;lsquo;/source=&amp;rsquo;&lt;/span&gt; for passing a shape ID, so that we know which shape was double-clicked.&lt;/p&gt;
&lt;h2&gt;Project Files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/files/VisioShapeDoubleClick1.zip&quot;&gt;VisioShapeDoubleClick1.zip (103.40 kb)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;Please, refer to these pages to get additional information on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff765486.aspx&quot; target=&quot;_blank&quot;&gt;Application.MarkerEvent Event&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/gg144579.aspx&quot; target=&quot;_blank&quot;&gt;ShapeSheet&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa140366(office.10).aspx&quot; target=&quot;_blank&quot;&gt;Using the QueueMarkerEvent Add-on in Visio Solutions&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 22 Nov 2011 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/handling-the-double-click-event-with-the-visio-api</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/handling-the-double-click-event-with-the-visio-api</guid>
        
        
      </item>
    
      <item>
        <title>Reading and Writing Visio Shape Information with C#</title>
        <description>&lt;p&gt;Often, you want to either to read or put some additional information regarding shapes in your diagram. For instance, you have an application for drawing a layout of your office. Obviously, every piece of equipment or furniture your have has some information, such as its name, code and any other information related to facility management. There are two ways of reading/writing such kind of information. The first one is to make use of Visio custom properties, while the second one is to store that kind of information in a database. The former is relatively simple, as it doesn&amp;rsquo;t require to have any additional layer, such as database. At the same time, the latter is more versatile, as it allows integrating Visio application with other business application by querying a database. In the tutorial we cover the first option, that is using custom properties of Visio. &lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;When drawing diagrams in Visio you often can assign custom properties to shapes by right-clicking and choosing &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Properties&lt;/span&gt;&lt;span style=&quot;font-family: Georgia;&quot;&gt;. For instance, during a creation of an &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Office Layout&lt;/span&gt; diagram you can see the following dialog.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: block; float: none; margin-left: auto; margin-right: auto;&quot; title=&quot;image&quot; src=&quot;/images/image_25.png&quot; alt=&quot;image&quot; width=&quot;838&quot; height=&quot;524&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The dialog prompts to enter such information as&amp;nbsp; length, depth, ID, name, product number and any other information that makes sense for furniture and office equipment.&lt;/p&gt;
&lt;p&gt;For sure, the Visio API provides tools for reading and writing such pieces of information. In the &lt;a href=&quot;http://www.mikeborozdin.com/post/Understanding-Visio-Event-Model.aspx&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt; I briefly mentioned that every &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Shape&lt;/span&gt; object holds a property of the type of &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Cell&lt;/span&gt; that keeps shape&amp;rsquo;s properties, as well as additional properties. In order to access one of them you should refer to &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Shape.Cell[&amp;lsquo;PropertyName&amp;rsquo;].&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Usually, property names slightly differ from those ones displayed in the user-friendly Visio dialog. It doesn&amp;rsquo;t impose a serious problem, however, because their names can be looked up in the &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;ShapeSheet Data Window&lt;/span&gt;. The window is accessible on right-clicking a shape and choosing &amp;lsquo;&lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Show ShapeSheet&amp;rsquo;&lt;/span&gt;. If you can&amp;rsquo;t see that window, then you must enable the Developer mode, which can be done by going to &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;File-&amp;gt;Options-&amp;gt;Advanced&lt;/span&gt; and ticking &amp;lsquo;&lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Run in developer mode&amp;rsquo;&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: inline;&quot; title=&quot;image&quot; src=&quot;/images/image_26.png&quot; alt=&quot;image&quot; width=&quot;841&quot; height=&quot;526&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The window shows a whole cell of available properties including some general ones linked to a shape appearance and a position in a diagram to more customised one located in the &amp;lsquo;Shape Data&amp;rsquo; section where you can spot properties like &amp;lsquo;Prop.Department&amp;rsquo;, &amp;lsquo;Prop.Name&amp;rsquo; and so on.&lt;/p&gt;
&lt;p&gt;We will create a simple application that will display a few properties in a form on selecting a shape. Modification of those properties will be also preserved. Moreover, we will allow user to save a modified diagram.&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;display: inline;&quot; title=&quot;image&quot; src=&quot;/images/image_27.png&quot; alt=&quot;image&quot; width=&quot;817&quot; height=&quot;510&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The basics of creating applications for Visio are given &lt;a href=&quot;http://www.mikeborozdin.com/post/Developing-Applications-for-Visio-with-Visual-Studio-(Windows-Forms-WPF-XBAP).aspx&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, while &lt;a href=&quot;http://www.mikeborozdin.com/post/Understanding-Visio-Event-Model.aspx&quot; target=&quot;_blank&quot;&gt;another tutorial&lt;/a&gt; explains how to track if a shape has been selected in a diagram, as well as how to handle some other events.&lt;/p&gt;
&lt;p&gt;So, when handling the SelectionChanged event we must extract and display values of custom properties we are interested in.&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; visioControl_SelectionChanged(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EVisOcx_SelectionChangedEvent e)&lt;/pre&gt;
&lt;pre&gt;{&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    Visio.Shape selectedShape = &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.Window.Selection.PrimaryItem;&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;rem&quot;&gt;//we bind only if we have selected a shape, not in case if we have deselected it&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (selectedShape != &lt;span class=&quot;kwrd&quot;&gt;null&lt;/span&gt;)&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;
&lt;pre&gt;        Binding bindingId = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Binding(&lt;span class=&quot;str&quot;&gt;&quot;Formula&quot;&lt;/span&gt;);&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        bindingId.Source = selectedShape.Cells[&lt;span class=&quot;str&quot;&gt;&quot;Prop.ID&quot;&lt;/span&gt;];&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;rem&quot;&gt;//we update a source, in our case, a Prop.ID everytime we type in something in a textbox&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        bindingId.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;rem&quot;&gt;//we specify a converter that removes trailing and leading quotes when displaying values&lt;/span&gt;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;rem&quot;&gt;//and enquotes values when saving them&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;        bindingId.Converter = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; VisioCellFormulaConverter();&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        tbId.SetBinding(TextBox.TextProperty, bindingId);&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        Binding bindingName = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Binding(&lt;span class=&quot;str&quot;&gt;&quot;Formula&quot;&lt;/span&gt;);&lt;/pre&gt;
&lt;pre&gt;        bindingName.Source = selectedShape.Cells[&lt;span class=&quot;str&quot;&gt;&quot;Prop.Name&quot;&lt;/span&gt;];&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        bindingName.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;&lt;/pre&gt;
&lt;pre&gt;        bindingName.Converter = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; VisioCellFormulaConverter();&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        tbName.SetBinding(TextBox.TextProperty, bindingName);&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        Binding bindingDepartment = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Binding(&lt;span class=&quot;str&quot;&gt;&quot;Formula&quot;&lt;/span&gt;);&lt;/pre&gt;
&lt;pre&gt;        bindingDepartment.Source = selectedShape.Cells[&lt;span class=&quot;str&quot;&gt;&quot;Prop.Department&quot;&lt;/span&gt;];&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        bindingDepartment.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;&lt;/pre&gt;
&lt;pre&gt;        bindingDepartment.Converter = &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; VisioCellFormulaConverter();&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        tbDepartment.SetBinding(TextBox.TextProperty, bindingDepartment);&lt;/pre&gt;
&lt;pre&gt;    }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;!-- .csharpcode, .csharpcode pre { 	font-size: small; 	color: black; 	font-family: consolas, &quot;Courier New&quot;, courier, monospace; 	background-color: #ffffff; 	/*white-space: pre;*/ } .csharpcode pre { margin: 0em; } .csharpcode .rem { color: #008000; } .csharpcode .kwrd { color: #0000ff; } .csharpcode .str { color: #006080; } .csharpcode .op { color: #0000c0; } .csharpcode .preproc { color: #cc6633; } .csharpcode .asp { background-color: #ffff00; } .csharpcode .html { color: #800000; } .csharpcode .attr { color: #ff0000; } .csharpcode .alt  { 	background-color: #f4f4f4; 	width: 100%; 	margin: 0em; } .csharpcode .lnum { color: #606060; } --&gt;
&lt;p&gt;Okay, it is clear that we have a WPF application because of having bindings. However, they do not make things any more complicated. Basically, we refer to a selected shape by pointing to &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Window.Selection.PrimaryItem&lt;/span&gt;. Well, in case there are multiple items in a selection we display information only on the first one. Then, provided we have three different text boxes for three different properties we specify bindings for those properties (&lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Prop.ID&lt;/span&gt;, &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Prop.Name&lt;/span&gt;, and &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Prop.Department&lt;/span&gt;). Each &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Cell&lt;/span&gt; object contains a property, &lt;span style=&quot;font-family: &#39;Courier New&#39;;&quot;&gt;Formula&lt;/span&gt;, that has a corresponding value, so we put in as a binding path. Since, that property, Formula, is surrounded by quotes, we remove them when showing data and put them back by using a converter called VisioCellFormulaConverter.&lt;/p&gt;
&lt;div class=&quot;csharpcode&quot;&gt;
&lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;class&lt;/span&gt; VisioCellFormulaConverter : IValueConverter&lt;/pre&gt;
&lt;pre&gt;{&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; Convert(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;, Type targetType, &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; parameter, System.Globalization.CultureInfo culture)&lt;/pre&gt;
&lt;pre&gt;    {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; result;&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.IsNullOrEmpty(&lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;.ToString()))&lt;/pre&gt;
&lt;pre&gt;        {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;            &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt; sValue = &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;.ToString();&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;            result = sValue.Substring(1, sValue.Length - 2);&lt;/pre&gt;
&lt;pre&gt;        }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;else&lt;/span&gt;&lt;/pre&gt;
&lt;pre&gt;        {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;            result = &lt;span class=&quot;kwrd&quot;&gt;string&lt;/span&gt;.Empty;&lt;/pre&gt;
&lt;pre&gt;        }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; result;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;
&lt;pre&gt;&amp;nbsp;&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; ConvertBack(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;, Type targetType, &lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; parameter, System.Globalization.CultureInfo culture)&lt;/pre&gt;
&lt;pre&gt;    {&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;        &lt;span class=&quot;kwrd&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;str&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; + &lt;span class=&quot;kwrd&quot;&gt;value&lt;/span&gt;.ToString() + &lt;span class=&quot;str&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;;&lt;/pre&gt;
&lt;pre&gt;    }&lt;/pre&gt;
&lt;pre class=&quot;alt&quot;&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can find the rest of the source code, as well, as the sample diagram here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/files/VisioShapeProperties.zip&quot;&gt;VisioShapeProperties.zip (484.76 kb)&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Sep 2011 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/reading-and-writing-visio-shape-information-with-c</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/reading-and-writing-visio-shape-information-with-c</guid>
        
        
      </item>
    
      <item>
        <title>Understanding Visio Event Model</title>
        <description>&lt;p&gt;In the previous chapters we have already seen an important Visio event, DocumentOpened, which is triggered each time you open a new diagram. However, the Visio API supports tons of other events and some of them are necessary for building sophisticated applications around Visio. Provided you have an application with an embedded Visio control and users can use the application to modify diagrams. Obviously, you want to keep track of such changes and, say, record them in a database. Visio events allows you to receive notifications every time such a change occurs. &lt;!-- more --&gt;&lt;/p&gt;  &lt;h1&gt;SelectionChanged&lt;/h1&gt;  &lt;p&gt;However, we postpone fancy diagram editing to a later stage. Instead we’ll start with a simple yet rather important event that fires when a user selects or deselects shape in a diagram.&lt;/p&gt;  &lt;p&gt;The event is called &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;SelectionChanged&lt;/span&gt; and you write down the following code in order to handle it:&lt;/p&gt;  &lt;div class=&quot;csharpcode&quot;&gt;   &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Window_Loaded(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, RoutedEventArgs e)&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.SelectionChanged += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; EVisOcx_SelectionChangedEventHandler(visioControl_SelectionChanged);&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;While the handler itself may look in the following way:&lt;/p&gt;

&lt;div class=&quot;csharpcode&quot;&gt;
  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; visioControl_SelectionChanged(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EVisOcx_SelectionChangedEvent e)&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&amp;quot;You have selected &amp;quot;&lt;/span&gt; + e.window.Selection.Count.ToString() + &lt;span class=&quot;str&quot;&gt;&amp;quot; shape(s)&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre&gt;    MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&amp;quot;Which are/is&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;            &lt;/pre&gt;

  &lt;pre&gt;    &lt;span class=&quot;kwrd&quot;&gt;foreach&lt;/span&gt; (Visio.Shape shape &lt;span class=&quot;kwrd&quot;&gt;in&lt;/span&gt; e.window.Selection)&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    {&lt;/pre&gt;

  &lt;pre&gt;        MessageBox.Show(shape.Text + &lt;span class=&quot;str&quot;&gt;&amp;quot; (&amp;quot;&lt;/span&gt; + shape.Name + &lt;span class=&quot;str&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    }&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we receive a parameter &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;e&lt;/span&gt; of type &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;EvisOcx_SelectionChangedEvent&lt;/span&gt; that allows as to get access to a current object of class &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;Selection&lt;/span&gt; that was already mentioned in the &lt;a href=&quot;http://www.mikeborozdin.com/post/Analysing-Parent-Child-Relations-in-Visio.aspx&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt;. As a result we can always get a number of selected shapes and iterate through them. It is clear that is a user drops a selection that object will contain no shapes at all.&lt;/p&gt;

&lt;h1&gt;ShapeAdded&lt;/h1&gt;

&lt;p&gt;This event is triggered by adding new shapes into a diagram. Although it hasn’t been shown yet, but it is possible incorporate a Visio window for adding shapes in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/image_24.png&quot;&gt;&lt;img style=&quot;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px&quot; title=&quot;image&quot; border=&quot;0&quot; alt=&quot;image&quot; src=&quot;/images/image_thumb_2.png&quot; width=&quot;249&quot; height=&quot;420&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moreover, this is not the only trigger for the event. Every time you paste something into a diagram including already present the event is fired. So, you can try it now without having to draw that shapes window.&lt;/p&gt;

&lt;pre class=&quot;csharpcode&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.ShapeAdded += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; EVisOcx_ShapeAddedEventHandler(visioControl_ShapeAdded);&lt;/pre&gt;

&lt;p&gt;I wrote the following event handler that simply outputs a name of a newly added or pasted shape:&lt;/p&gt;

&lt;div class=&quot;csharpcode&quot;&gt;
  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; visioControl_ShapeAdded(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EVisOcx_ShapeAddedEvent e)&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    MessageBox.Show(&lt;span class=&quot;str&quot;&gt;&amp;quot;You have added a new shape which is &amp;quot;&lt;/span&gt; + e.shape.Name);&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As with &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;SelectionChanged &lt;/span&gt;the second parameter of the handler contains useful information about the event, in particular you can access a newly added shape.&lt;/p&gt;

&lt;h1&gt;Detecting Shape Movements, Resizing, and etc.&lt;/h1&gt;

&lt;p&gt;The Visio API doesn’t have an event, like ShapeMoved or ShapeResized. Instead, there is an event called CellChanged that consumes almost every event related to changing the way a shape looks. Each shape has a property, Cell, that contains data about a shape’s size, fill colour, line colour, coordinates, and etc. This data is represented as as spread sheet, where &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;Cell.Name&lt;/span&gt; refers to a property name (e.g. Width), while &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;Cell.Formula&lt;/span&gt; holds its values. You can find more information about that on &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff768297.aspx&quot; target=&quot;_blank&quot;&gt;MSDN&lt;/a&gt;. Obviously, when moving a shape around a diagram this property changes. Moreover, the event can fire a few times depending on how many properties have been changed.&lt;/p&gt;

&lt;p&gt;If we want to detect a movement we are interested only in &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;PinX&lt;/span&gt; and &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;PinY&lt;/span&gt; that represent the centre of rotation of a shape.&lt;/p&gt;

&lt;div class=&quot;csharpcode&quot;&gt;
  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.Window.Application.CellChanged += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Visio.EApplication_CellChangedEventHandler(Application_CellChanged);&lt;/pre&gt;

  &lt;pre&gt;&lt;span class=&quot;rem&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Application_CellChanged(Visio.Cell cell)&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    &lt;span class=&quot;kwrd&quot;&gt;if&lt;/span&gt; (cell.Name == &lt;span class=&quot;str&quot;&gt;&amp;quot;PinX&amp;quot;&lt;/span&gt; || cell.Name == &lt;span class=&quot;str&quot;&gt;&amp;quot;PinY&amp;quot;&lt;/span&gt;)&lt;/pre&gt;

  &lt;pre&gt;    {&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;        MessageBox.Show(cell.Shape.Name + &lt;span class=&quot;str&quot;&gt;&amp;quot; has been moved&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre&gt;    }&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Moreover, it is also possible to check which shape has been really moved by accessing &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;cell.Shape&lt;/span&gt;.&lt;/p&gt;

&lt;h1&gt;Shape Caption Change&lt;/h1&gt;

&lt;p&gt;Often, it is useful to track when a user changes a shape caption (or &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;Shape.Text&lt;/span&gt; in the API terminology). There is a convenient event, &lt;span style=&quot;font-family: &amp;#39;Courier New&amp;#39;&quot;&gt;ShapeExitedTextEdit&lt;/span&gt;, that, as the title suggests, fires when a user exists a textbox for editing a caption.&lt;/p&gt;

&lt;div class=&quot;csharpcode&quot;&gt;
  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.ShapeExitedTextEdit += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; EVisOcx_ShapeExitedTextEditEventHandler(visioControl_ShapeExitedTextEdit);&lt;/pre&gt;

  &lt;pre&gt;&lt;span class=&quot;rem&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; visioControl_ShapeExitedTextEdit(&lt;span class=&quot;kwrd&quot;&gt;object&lt;/span&gt; sender, EVisOcx_ShapeExitedTextEditEvent e)&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    MessageBox.Show(e.shape.Name + &lt;span class=&quot;str&quot;&gt;&amp;quot;&#39;s text has been chaged&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;h1&gt;BeforeShapeDelete&lt;/h1&gt;

&lt;p&gt;Finally, if you feel you some shape in your diagram is not needed anymore, you can easily delete it and most importantly handle that event.&lt;/p&gt;

&lt;div class=&quot;csharpcode&quot;&gt;
  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;this&lt;/span&gt;.visioControl.Window.Application.BeforeShapeDelete += &lt;span class=&quot;kwrd&quot;&gt;new&lt;/span&gt; Visio.EApplication_BeforeShapeDeleteEventHandler(Application_BeforeShapeDelete);&lt;/pre&gt;

  &lt;pre&gt;&lt;span class=&quot;rem&quot;&gt;//...&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;&lt;span class=&quot;kwrd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kwrd&quot;&gt;void&lt;/span&gt; Application_BeforeShapeDelete(Visio.Shape shape)&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class=&quot;alt&quot;&gt;    MessageBox.Show(shape.Name + &lt;span class=&quot;str&quot;&gt;&amp;quot; has been deleted&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;h1&gt;Source Code&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;/files/VisioEventModelTutorial.zip&quot;&gt;VisioEventModelTutorial.zip (76.63 kb)&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The Visio event model allows you to build rich interaction between your application and a hosted Visio control. You can freely allow users to edit diagrams in your application and the application itself will be notified about every change.&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2011 00:00:00 +0000</pubDate>
        <link>https://mikeborozdin.com/post/understanding-visio-event-model</link>
        <guid isPermaLink="true">https://mikeborozdin.com/post/understanding-visio-event-model</guid>
        
        
      </item>
    
  </channel>
</rss>
